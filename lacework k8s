Introduction
The document describes the steps required to deploy a Kubernetes cluster with Lacework Agent using Kops.


Prerequisite

Install the following command-line tools on your machine.
AWS CLI - Installation Guide - Releases (For Version Specific Installation)

Kops - Installation Guide - Releases (For Version Specific Installation)

Kubectl - Installation Guide - Releases (For Version Specific Installation)


Access & Configurations.
You would need programmatic access to an AWS IAM Admin user. (Access Key and Secret Access Key for such user)
If you do not have an admin user in AWS IAM then your IAM user should at least have the following IAM permissions.


AmazonEC2FullAccess
AmazonRoute53FullAccess
AmazonS3FullAccess
IAMFullAccess
AmazonVPCFullAccess
If you already have the ~/.ssh/id_rsa.pub file then you can skip this step.
Generate an SSH key pair by executing the following command. 


ssh-keygen -t rsa -b 4096
Generating public/private rsa key pair.
Enter file in which to save the key (~/.ssh/id_rsa):~/.ssh/id_rsa
Enter passphrase (empty for no passphrase): <LEAVE IT BLANK>
Enter same passphrase again: <LEAVE IT BLANK>

Files and Folders
Ensure that the folder ~/.kube_keys is already created. If not then execute the following command -


mkdir ~/.kube_keys

Prepare local environment
Execute the following command to navigate to your home directory on Linux/Mac terminal.

cd ~
Put the following commands in a text file and save it with the name the same as the CLUSTER NAME.

Replace the <PLACEHOLDERS> with appropriate values (WITHOUT SPACE) before proceeding to the next step.

export AWS_ACCESS_KEY_ID=<PUT AWS ACCESS KEY HERE>
export AWS_SECRET_ACCESS_KEY=<PUT AWS SECRET ACCESS KEY HERE>
export AWS_REGION="us-west-2"
export CLUSTERNAME=<PUT CLUSTER NAME HERE>
export NAME=$CLUSTERNAME.k8s.local
export KOPS_STATE_STORE=s3://kops-state-bucket-$CLUSTERNAME
export KUBECONFIG=~/.kube_keys/config-$CLUSTERNAME
export KOPS_RUN_OBSOLETE_VERSION=true
kubectl config use-context $NAME
export PS1="\h:\W \u (K8s $CLUSTERNAME) \$ "
You need to execute the below step every time you make changes to the file above.

Then, execute the following command -

source ~/<PUT CLUSTER NAME HERE>

For Example -

source ~/test-cluster
Ignore the following error if you get it before the cluster is deployed -

error: no context exists with the name: "qa3-test.k8s.local".

Create and Setup AWS S3 Bucket for Kops State Storage

To store the state data generated by Kops for Kubernetes clusters, we would create the AWS S3 bucket first.
aws s3api create-bucket --bucket kops-state-bucket-$CLUSTERNAME --region $AWS_REGION --acl private --create-bucket-configuration LocationConstraint=$AWS_REGION

Now that the AWS S3 bucket has been created, let's secure it. 
aws s3api put-bucket-encryption --bucket kops-state-bucket-$CLUSTERNAME --server-side-encryption-configuration '
{
  "Rules": [
    {
      "ApplyServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
      }
    }
  ]
}'

Create and Configure a Kubernetes Cluster with Kops.


Create a Kubernetes Cluster Configuration with Kops
The following command will create a cluster configuration and store the data in the Kops state store S3 bucket which we have created in the previous step.

Please check and update the following details in the command text before executing it.

If you are not sure which Kubernetes version to run then please delete the line “--kubernetes-version 1.12.10 \“ to run the default version.

kops create cluster \
   --master-count 1 \
   --node-count 3 \
   --zones us-west-2a \
   --master-zones us-west-2a \
   --node-size t2.medium \
   --master-size t2.medium \
   --topology private \
   --networking calico \
   --kubernetes-version 1.12.10 \
   --ssh-public-key ~/.ssh/id_rsa.pub \
   $NAME

Deploy the Cluster
The following command will fetch the data from Kops state store S3 bucket and will start deploying all the required resources on the AWS cloud.

kops update cluster --name ${NAME} --yes

Validate the Cluster
Wait for some time (10 mins approx) for the resources to be deployed on the AWS Cloud. After that execute the following command to validate if the cluster is ready for use.

kops validate cluster ${NAME}

Access the K8s cluster with Kubectl
Once the cluster is deployed and validated, It can be accessed with “Kubectl” 

if you have followed the steps mentioned in “Prepare the local environment” before deploying the cluster, you can execute the following command and access the cluster

source ~/<PUT CLUSTER NAME HERE>

For Example -

source ~/test-cluster
Every time you want to start a new CLI session and access Kubernetes, you will need to execute the above command first.

If you have multiple clusters then get the list of the clusters by executing the following command -

kops get clusters
After that you can just start using the Kubernetes cluster with “kubectl“ CLI and start executing commands like below and so on.

kubectl cluster-info
kubectl get nodes
kubectl get pods
